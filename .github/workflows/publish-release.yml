name: Manual Release Publisher

# This workflow is for manual release publishing if needed
# The main release process is handled by build-and-publish.yml

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string

jobs:
  manual-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format X.Y.Z (e.g., 1.2.3)"
          exit 1
        fi
        echo "Version format is valid: $VERSION"
        
    - name: Update version in project file
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "Updating project file with version: $VERSION"
        
        # Replace version 1.0.0 with specified version
        sed -i "s/<Version>1\.0\.0<\/Version>/<Version>$VERSION<\/Version>/" Bento/Bento.csproj
        sed -i "s/<AssemblyVersion>1\.0\.0\.0<\/AssemblyVersion>/<AssemblyVersion>$VERSION.0<\/AssemblyVersion>/" Bento/Bento.csproj
        sed -i "s/<FileVersion>1\.0\.0\.0<\/FileVersion>/<FileVersion>$VERSION.0<\/FileVersion>/" Bento/Bento.csproj
        
        echo "Project file updated:"
        grep -E "(Version|AssemblyVersion|FileVersion)" Bento/Bento.csproj
        
    - name: Create and push tag
      run: |
        VERSION="${{ github.event.inputs.version }}"
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag "v$VERSION"
        git push origin "v$VERSION"
        echo "Created and pushed tag: v$VERSION"
        
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build release DLL
      run: dotnet build Bento/Bento.csproj --configuration Release --output ./release-artifacts
      
    - name: Create NuGet package
      run: dotnet pack Bento/Bento.csproj --configuration Release --output ./release-packages --no-build
      
    - name: Verify build outputs
      run: |
        echo "Release artifacts:"
        ls -la ./release-artifacts/
        echo "NuGet packages:"
        ls -la ./release-packages/
        
    - name: Create release archive
      run: |
        VERSION="${{ github.event.inputs.version }}"
        cd release-artifacts
        zip -r ../bento-sdk-$VERSION.zip Bento.dll Bento.pdb Bento.deps.json
        cd ..
        ls -la bento-sdk-$VERSION.zip
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ github.event.inputs.version }}"
        name: "Bento SDK v${{ github.event.inputs.version }}"
        body: |
          ## Bento .NET SDK v${{ github.event.inputs.version }}
          
          **Manual release created**
          
          ### ðŸ“¦ Downloads
          - **DLL Package**: `bento-sdk-${{ github.event.inputs.version }}.zip`
          - **NuGet Package**: `Bento.SDK.${{ github.event.inputs.version }}.nupkg`
          
          ### ðŸš€ Installation
          ```bash
          dotnet add package Bento.SDK --version ${{ github.event.inputs.version }}
          ```
        files: |
          bento-sdk-${{ github.event.inputs.version }}.zip
          release-packages/*.nupkg
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
