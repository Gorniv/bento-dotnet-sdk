---
name: Build and Publish Bento SDK

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release:
        description: 'Create a release?'
        required: true
        type: boolean
        default: false
      version:
        description: 'Version (e.g., 1.2.3) - leave empty to auto-increment'
        required: false
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Get current version
        id: get-version
        run: |
          # Read version from project file
          if [ -f "Bento/Bento.csproj" ]; then
            CURRENT_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" Bento/Bento.csproj || echo "1.0.0")
          else
            CURRENT_VERSION="1.0.0"
          fi
          
          echo "Current version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run traditional tests (if test project exists)
        run: |
          if find . \( -name "*.Tests.csproj" -o -name "*Tests.csproj" \
          -o -name "*Test.csproj" \) | grep -q .; then
            dotnet test --configuration Release --no-build --verbosity normal
          else
            echo "No traditional test projects found, skipping unit tests"
          fi

      - name: Run SDK functional tests
        run: |
          echo "Running Bento SDK functional tests..."
          cd Bento.Examples

          # Create test configuration with dummy values
          cat > appsettings.test.json << 'EOF'
          {
            "Bento": {
              "PublishableKey": "test-publishable-key",
              "SecretKey": "test-secret-key",
              "SiteUuid": "test-site-uuid"
            }
          }
          EOF

          # Run tests with timeout and capture exit code
          timeout 300 dotnet run -- --verbose > test_output.log 2>&1 || TEST_EXIT_CODE=$?

          # Display test output
          echo "=== Test Output ==="
          cat test_output.log

          # Check if tests ran successfully
          if grep -q "Test Summary:" test_output.log; then
            echo "‚úÖ Functional tests executed successfully"
            echo "‚ÑπÔ∏è  Tests are expected to show 'Success=False' due to dummy API keys"
          else
            echo "‚ùå Functional tests failed to execute properly"
            exit 1
          fi
        env:
          ASPNETCORE_ENVIRONMENT: test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bento-sdk-build-${{ github.sha }}
          path: |
            Bento/bin/Release/netstandard2.1/Bento.dll
            Bento/bin/Release/netstandard2.1/Bento.pdb
            Bento/bin/Release/netstandard2.1/Bento.deps.json
          retention-days: 30

  release:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event.inputs.release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Determine release version
        id: version
        run: |
          # Function to increment version
          increment_version() {
            local version=$1
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
            echo "${major}.${minor}.${patch}"
          }
          
          CURRENT_VERSION="${{ needs.build-and-test.outputs.version }}"
          
          # Use provided version or auto-increment
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            NEW_VERSION="${{ github.event.inputs.version }}"
            echo "Using manually specified version: $NEW_VERSION"
          else
            NEW_VERSION=$(increment_version "$CURRENT_VERSION")
            echo "Auto-incremented version from $CURRENT_VERSION to $NEW_VERSION"
          fi
          
          # Validate version format
          if ! [[ "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Error: Invalid version format: $NEW_VERSION"
            echo "Version must be in format: major.minor.patch or major.minor.patch-suffix"
            exit 1
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=$(echo $NEW_VERSION | sed 's/-.*$//')" >> $GITHUB_OUTPUT

      - name: Update version in project file
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          CLEAN_VERSION="${{ steps.version.outputs.clean_version }}"
          
          # Install xmlstarlet for XML manipulation
          sudo apt-get update && sudo apt-get install -y xmlstarlet
          
          # Update versions using xmlstarlet
          xmlstarlet ed -L \
            -u "//Version" -v "$VERSION" \
            -u "//AssemblyVersion" -v "$CLEAN_VERSION.0" \
            -u "//FileVersion" -v "$CLEAN_VERSION.0" \
            Bento/Bento.csproj
          
          echo "Updated project file to version: $VERSION"

      - name: Restore and Build with new version
        run: |
          dotnet restore
          dotnet build Bento/Bento.csproj --configuration Release

      - name: Create NuGet package
        run: |
          dotnet pack Bento/Bento.csproj --configuration Release \
          --output ./packages --no-build

      - name: Create release assets
        run: |
          # Create DLL archive
          mkdir -p release-artifacts
          cp Bento/bin/Release/netstandard2.1/* ./release-artifacts/
          cd release-artifacts
          zip -r ../bento-sdk-${{ steps.version.outputs.new_version }}.zip \
            Bento.dll Bento.pdb Bento.deps.json
          cd ..
          
          echo "Created release archive"

      - name: Generate release notes
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          
          # Get commits since last release (approximation based on main branch)
          COMMITS=$(git log --pretty=format:"- %s" -10 --no-merges)
          
          cat > release_notes.md << EOF
          ## Bento .NET SDK v${VERSION}
          
          ### üì¶ Downloads
          - **DLL Package**: \`bento-sdk-${VERSION}.zip\`
          - **NuGet Package**: \`Bento.SDK.${VERSION}.nupkg\`
          
          ### üöÄ Installation
          \`\`\`bash
          dotnet add package Bento.SDK --version ${VERSION}
          \`\`\`
          
          ### üìù Recent Changes
          ${COMMITS}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: "Bento SDK v${{ steps.version.outputs.new_version }}"
          body_path: release_notes.md
          files: |
            bento-sdk-${{ steps.version.outputs.new_version }}.zip
            packages/*.nupkg
          draft: false
          prerelease: ${{ contains(steps.version.outputs.new_version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NuGet
        if: ${{ !contains(steps.version.outputs.new_version, '-') }}
        run: |
          dotnet nuget push packages/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json --skip-duplicate
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Commit version update back to repository
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git add Bento/Bento.csproj
          git commit -m "Release: Bump version to ${{ steps.version.outputs.new_version }}"
          git push origin main
          
          echo "‚úÖ Version ${{ steps.version.outputs.new_version }} released successfully!"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bento-sdk-release-${{ steps.version.outputs.new_version }}
          path: |
            ./release-artifacts/
            ./packages/*.nupkg
          retention-days: 90